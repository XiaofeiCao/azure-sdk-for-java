// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"version\":\"xz\",\"parameters\":{\"vqagtltdhlf\":\"hfrbbc\",\"vgtrdcnifmzzs\":\"qojpy\",\"g\":\"ymbrnysuxmpraf\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":2089880576,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1062558115,\"maxPercentUnhealthyPartitionsPerService\":229686539,\"maxPercentUnhealthyReplicasPerPartition\":1919982879},\"serviceTypeHealthPolicyMap\":{\"qrouda\":{\"maxPercentUnhealthyServices\":2112438286,\"maxPercentUnhealthyPartitionsPerService\":848051352,\"maxPercentUnhealthyReplicasPerPartition\":2125328140},\"ehhr\":{\"maxPercentUnhealthyServices\":1715905241,\"maxPercentUnhealthyPartitionsPerService\":1222177326,\"maxPercentUnhealthyReplicasPerPartition\":1462699708},\"n\":{\"maxPercentUnhealthyServices\":1656627274,\"maxPercentUnhealthyPartitionsPerService\":221531853,\"maxPercentUnhealthyReplicasPerPartition\":901509130}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"hcxgkmoyx\",\"healthCheckStableDuration\":\"dyuib\",\"healthCheckRetryTimeout\":\"mfdn\",\"upgradeTimeout\":\"zydvfvf\",\"upgradeDomainTimeout\":\"jnaeois\"},\"instanceCloseDelayDuration\":5267361505429435722,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":461660857965636182,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"cvwmzhwplefa\",\"principalId\":\"vxilcbt\"},{\"name\":\"nhnzeyqxt\",\"principalId\":\"jfzqlqhycavodgg\"},{\"name\":\"dbeesmie\",\"principalId\":\"nlrariaawiuagy\"}]},\"tags\":{\"agt\":\"fbylyrfg\"},\"identity\":{\"principalId\":\"ocqwogfnzjvus\",\"tenantId\":\"ld\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"isofieypefojyqd\":{\"principalId\":\"lfsbtkadpysow\",\"clientId\":\"tgkbugrjqctojc\"},\"cwkhihi\":{\"principalId\":\"u\",\"clientId\":\"cp\"}}},\"location\":\"hzdsqtzbsrgnow\",\"id\":\"hfgmvecactxm\",\"name\":\"oteyowc\",\"type\":\"uqovekqvgqouwif\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApplicationResource response = manager.applications()
            .define("mdjvlpj")
            .withExistingManagedCluster("fhoqca", "ewda")
            .withRegion("luwmncst")
            .withTags(mapOf("wzqa", "dmovzvfva", "gzuriglaecxndt", "f"))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("wf", new UserAssignedIdentity(), "dynhdwdigum", new UserAssignedIdentity(), "zwwva",
                        new UserAssignedIdentity(), "auy", new UserAssignedIdentity())))
            .withVersion("sgeivsiy")
            .withParameters(mapOf("xonbzoggculapz", "dncj", "pgogtqxepny", "y"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(1407382097)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(998565327)
                            .withMaxPercentUnhealthyPartitionsPerService(781075850)
                            .withMaxPercentUnhealthyReplicasPerPartition(1631944105))
                    .withServiceTypeHealthPolicyMap(mapOf("qzhv",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(21548435)
                            .withMaxPercentUnhealthyPartitionsPerService(279762954)
                            .withMaxPercentUnhealthyReplicasPerPartition(1326013393),
                        "yfm",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(541182731)
                            .withMaxPercentUnhealthyPartitionsPerService(1580266173)
                            .withMaxPercentUnhealthyReplicasPerPartition(146318685),
                        "rkjpvdwxfzwii",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1870465224)
                            .withMaxPercentUnhealthyPartitionsPerService(1566451113)
                            .withMaxPercentUnhealthyReplicasPerPartition(1885560912),
                        "bhyzsxjr",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1157352083)
                            .withMaxPercentUnhealthyPartitionsPerService(615358685)
                            .withMaxPercentUnhealthyReplicasPerPartition(1754263967))))
                .withForceRestart(true)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("rnegvmn")
                        .withHealthCheckStableDuration("uqeqv")
                        .withHealthCheckRetryTimeout("dspastjbkkdmfl")
                        .withUpgradeTimeout("est")
                        .withUpgradeDomainTimeout("jlxr"))
                .withInstanceCloseDelayDuration(6506157078923372574L)
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                .withUpgradeReplicaSetCheckTimeout(3000055829145832796L)
                .withRecreateApplication(true))
            .withManagedIdentities(Arrays.asList(
                new ApplicationUserAssignedIdentity().withName("xlktwkuzi").withPrincipalId("cslevufuztckt"),
                new ApplicationUserAssignedIdentity().withName("h").withPrincipalId("tqedcgzulwm"),
                new ApplicationUserAssignedIdentity().withName("rqzz").withPrincipalId("rjvpglydzgkrvqee"),
                new ApplicationUserAssignedIdentity().withName("toepryu").withPrincipalId("nwy")))
            .create();

        Assertions.assertEquals("fbylyrfg", response.tags().get("agt"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("hzdsqtzbsrgnow", response.location());
        Assertions.assertEquals("xz", response.version());
        Assertions.assertEquals("hfrbbc", response.parameters().get("vqagtltdhlf"));
        Assertions.assertEquals(true, response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(2089880576,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1062558115,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(229686539,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1919982879,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(2112438286,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qrouda")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(848051352,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qrouda")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2125328140,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qrouda")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("hcxgkmoyx",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("dyuib",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("mfdn",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("zydvfvf", response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("jnaeois",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(5267361505429435722L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(461660857965636182L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("cvwmzhwplefa", response.managedIdentities().get(0).name());
        Assertions.assertEquals("vxilcbt", response.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
