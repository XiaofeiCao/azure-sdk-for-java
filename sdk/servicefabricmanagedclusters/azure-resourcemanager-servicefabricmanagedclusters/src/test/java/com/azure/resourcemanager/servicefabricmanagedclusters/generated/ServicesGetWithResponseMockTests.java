// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"hzmme\",\"serviceTypeName\":\"ckdlpag\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"failcfx\",\"placementConstraints\":\"dboxdfgsftufqobr\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"cgcckknhxkizvyt\"}],\"serviceLoadMetrics\":[{\"name\":\"vuljraaeranokqg\",\"weight\":\"Zero\",\"primaryDefaultLoad\":811318318,\"secondaryDefaultLoad\":380919763,\"defaultLoad\":2004582271},{\"name\":\"oylaxxul\",\"weight\":\"Low\",\"primaryDefaultLoad\":1171006213,\"secondaryDefaultLoad\":2051951333,\"defaultLoad\":414499162}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Low\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"ytdc\":\"hryvy\",\"btmvpdvjdhttza\":\"xgccknfnw\",\"rjdqnsdfzp\":\"fedxihchrphkm\"},\"location\":\"tg\",\"id\":\"lkdghr\",\"name\":\"euutlwxezwzh\",\"type\":\"kvbwnhhtqlgeh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServiceResource response = manager.services()
            .getWithResponse("gsfjac", "slhhxudbxv", "d", "tnsi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dboxdfgsftufqobr", response.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("cgcckknhxkizvyt", response.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("vuljraaeranokqg", response.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.ZERO,
            response.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(811318318, response.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(380919763, response.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(2004582271, response.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, response.properties().defaultMoveCost());
        Assertions.assertEquals("ckdlpag", response.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.properties().servicePackageActivationMode());
        Assertions.assertEquals("failcfx", response.properties().serviceDnsName());
        Assertions.assertEquals("hryvy", response.tags().get("ytdc"));
        Assertions.assertEquals("tg", response.location());
    }
}
