// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AdditionalNetworkInterfaceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = BinaryData.fromString(
            "{\"name\":\"vvyhg\",\"enableAcceleratedNetworking\":true,\"dscpConfiguration\":{\"id\":\"rqufegxuvwz\"},\"ipConfigurations\":[{\"name\":\"nhlmctlpdng\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"bmhrixkwmyijejv\"},{\"id\":\"rh\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ixexcc\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ax\"},{\"id\":\"exdrrvqahqkg\"},{\"id\":\"pwijnhy\"}],\"subnet\":{\"id\":\"f\"},\"privateIPAddressVersion\":\"IPv4\",\"publicIPAddressConfiguration\":{\"name\":\"bfvoowvrv\",\"ipTags\":[{\"ipTagType\":\"jqppyostronzmy\",\"tag\":\"gfipnsxk\"},{\"ipTagType\":\"cwaekrrjre\",\"tag\":\"fxtsgum\"}],\"publicIPAddressVersion\":\"IPv6\"}},{\"name\":\"lik\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"lo\"},{\"id\":\"qpvuzlmvfelf\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"lcrpw\"},{\"id\":\"eznoig\"},{\"id\":\"njwmwkpnbsazejj\"},{\"id\":\"kagfhsxtt\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"xnfaazpxdtnk\"},{\"id\":\"kqjjlwuenvrkp\"},{\"id\":\"uaibrebqaaysj\"},{\"id\":\"xqtnq\"}],\"subnet\":{\"id\":\"zlwfffiakp\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"m\",\"ipTags\":[{\"ipTagType\":\"ltmm\",\"tag\":\"ihyeozphvw\"}],\"publicIPAddressVersion\":\"IPv4\"}}]}")
            .toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("vvyhg", model.name());
        Assertions.assertEquals(true, model.enableAcceleratedNetworking());
        Assertions.assertEquals("rqufegxuvwz", model.dscpConfiguration().id());
        Assertions.assertEquals("nhlmctlpdng", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bmhrixkwmyijejv",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ixexcc",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ax", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("f", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("bfvoowvrv", model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("jqppyostronzmy",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("gfipnsxk",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model
            = new AdditionalNetworkInterfaceConfiguration().withName("vvyhg")
                .withEnableAcceleratedNetworking(true)
                .withDscpConfiguration(new SubResource().withId("rqufegxuvwz"))
                .withIpConfigurations(
                    Arrays
                        .asList(
                            new IpConfiguration().withName("nhlmctlpdng")
                                .withApplicationGatewayBackendAddressPools(Arrays.asList(
                                    new SubResource().withId("bmhrixkwmyijejv"), new SubResource().withId("rh")))
                                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("ixexcc")))
                                .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("ax"),
                                    new SubResource().withId("exdrrvqahqkg"), new SubResource().withId("pwijnhy")))
                                .withSubnet(new SubResource().withId("f"))
                                .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV4)
                                .withPublicIPAddressConfiguration(
                                    new IPConfigurationPublicIPAddressConfiguration().withName("bfvoowvrv")
                                        .withIpTags(Arrays.asList(
                                            new IpTag().withIpTagType("jqppyostronzmy").withTag("gfipnsxk"),
                                            new IpTag().withIpTagType("cwaekrrjre").withTag("fxtsgum")))
                                        .withPublicIPAddressVersion(PublicIPAddressVersion.IPV6)),
                            new IpConfiguration().withName("lik")
                                .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("lo"),
                                    new SubResource().withId("qpvuzlmvfelf")))
                                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("lcrpw"),
                                    new SubResource().withId("eznoig"), new SubResource().withId("njwmwkpnbsazejj"),
                                    new SubResource().withId("kagfhsxtt")))
                                .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("xnfaazpxdtnk"),
                                    new SubResource().withId("kqjjlwuenvrkp"),
                                    new SubResource().withId("uaibrebqaaysj"), new SubResource().withId("xqtnq")))
                                .withSubnet(new SubResource().withId("zlwfffiakp"))
                                .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV6)
                                .withPublicIPAddressConfiguration(new IPConfigurationPublicIPAddressConfiguration()
                                    .withName("m")
                                    .withIpTags(Arrays.asList(new IpTag().withIpTagType("ltmm").withTag("ihyeozphvw")))
                                    .withPublicIPAddressVersion(PublicIPAddressVersion.IPV4))));
        model = BinaryData.fromObject(model).toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("vvyhg", model.name());
        Assertions.assertEquals(true, model.enableAcceleratedNetworking());
        Assertions.assertEquals("rqufegxuvwz", model.dscpConfiguration().id());
        Assertions.assertEquals("nhlmctlpdng", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bmhrixkwmyijejv",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ixexcc",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ax", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("f", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("bfvoowvrv", model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("jqppyostronzmy",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("gfipnsxk",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
