// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Access;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Direction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NetworkSecurityRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NsgProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityRule model = BinaryData.fromString(
            "{\"name\":\"wlquuijfqkace\",\"description\":\"ipfpubji\",\"protocol\":\"udp\",\"sourceAddressPrefixes\":[\"f\",\"ohqkvpuvksgpls\",\"kn\"],\"destinationAddressPrefixes\":[\"synljphuopxodl\",\"iyntorzihle\",\"sjswsrms\"],\"sourcePortRanges\":[\"rpzbchckqqzqi\",\"xiy\"],\"destinationPortRanges\":[\"i\",\"ynkedyatrwyhqmib\",\"yhwitsmypyynpcdp\",\"mnzgmwznmabi\"],\"sourceAddressPrefix\":\"sorgj\",\"destinationAddressPrefix\":\"bldtlww\",\"sourcePortRange\":\"kdmtncvokotll\",\"destinationPortRange\":\"yhgsy\",\"access\":\"deny\",\"priority\":1150957892,\"direction\":\"outbound\"}")
            .toObject(NetworkSecurityRule.class);
        Assertions.assertEquals("wlquuijfqkace", model.name());
        Assertions.assertEquals("ipfpubji", model.description());
        Assertions.assertEquals(NsgProtocol.UDP, model.protocol());
        Assertions.assertEquals("f", model.sourceAddressPrefixes().get(0));
        Assertions.assertEquals("synljphuopxodl", model.destinationAddressPrefixes().get(0));
        Assertions.assertEquals("rpzbchckqqzqi", model.sourcePortRanges().get(0));
        Assertions.assertEquals("i", model.destinationPortRanges().get(0));
        Assertions.assertEquals("sorgj", model.sourceAddressPrefix());
        Assertions.assertEquals("bldtlww", model.destinationAddressPrefix());
        Assertions.assertEquals("kdmtncvokotll", model.sourcePortRange());
        Assertions.assertEquals("yhgsy", model.destinationPortRange());
        Assertions.assertEquals(Access.DENY, model.access());
        Assertions.assertEquals(1150957892, model.priority());
        Assertions.assertEquals(Direction.OUTBOUND, model.direction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityRule model = new NetworkSecurityRule().withName("wlquuijfqkace")
            .withDescription("ipfpubji")
            .withProtocol(NsgProtocol.UDP)
            .withSourceAddressPrefixes(Arrays.asList("f", "ohqkvpuvksgpls", "kn"))
            .withDestinationAddressPrefixes(Arrays.asList("synljphuopxodl", "iyntorzihle", "sjswsrms"))
            .withSourcePortRanges(Arrays.asList("rpzbchckqqzqi", "xiy"))
            .withDestinationPortRanges(Arrays.asList("i", "ynkedyatrwyhqmib", "yhwitsmypyynpcdp", "mnzgmwznmabi"))
            .withSourceAddressPrefix("sorgj")
            .withDestinationAddressPrefix("bldtlww")
            .withSourcePortRange("kdmtncvokotll")
            .withDestinationPortRange("yhgsy")
            .withAccess(Access.DENY)
            .withPriority(1150957892)
            .withDirection(Direction.OUTBOUND);
        model = BinaryData.fromObject(model).toObject(NetworkSecurityRule.class);
        Assertions.assertEquals("wlquuijfqkace", model.name());
        Assertions.assertEquals("ipfpubji", model.description());
        Assertions.assertEquals(NsgProtocol.UDP, model.protocol());
        Assertions.assertEquals("f", model.sourceAddressPrefixes().get(0));
        Assertions.assertEquals("synljphuopxodl", model.destinationAddressPrefixes().get(0));
        Assertions.assertEquals("rpzbchckqqzqi", model.sourcePortRanges().get(0));
        Assertions.assertEquals("i", model.destinationPortRanges().get(0));
        Assertions.assertEquals("sorgj", model.sourceAddressPrefix());
        Assertions.assertEquals("bldtlww", model.destinationAddressPrefix());
        Assertions.assertEquals("kdmtncvokotll", model.sourcePortRange());
        Assertions.assertEquals("yhgsy", model.destinationPortRange());
        Assertions.assertEquals(Access.DENY, model.access());
        Assertions.assertEquals(1150957892, model.priority());
        Assertions.assertEquals(Direction.OUTBOUND, model.direction());
    }
}
