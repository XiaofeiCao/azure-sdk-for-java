// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"tx\",\"version\":\"zukxitmmqtgqq\",\"parameters\":{\"isavok\":\"rnxrxcpj\",\"azivjlfrqttbajl\":\"dzf\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":764088106,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1169093946,\"maxPercentUnhealthyPartitionsPerService\":1135299409,\"maxPercentUnhealthyReplicasPerPartition\":713204380},\"serviceTypeHealthPolicyMap\":{\"qfkuvscxkdmli\":{\"maxPercentUnhealthyServices\":1147241204,\"maxPercentUnhealthyPartitionsPerService\":1219308694,\"maxPercentUnhealthyReplicasPerPartition\":1442492241}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"rxkpmloazuruoc\",\"healthCheckStableDuration\":\"goorbteo\",\"healthCheckRetryTimeout\":\"bfhjxakvvjgsl\",\"upgradeTimeout\":\"r\",\"upgradeDomainTimeout\":\"il\"},\"instanceCloseDelayDuration\":4699671859850911433,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":2397311129400397153,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"abgyvudt\",\"principalId\":\"uewbc\"}]},\"tags\":{\"bvpa\":\"uuwhcjyxcc\",\"px\":\"akkud\"},\"identity\":{\"principalId\":\"plmag\",\"tenantId\":\"cyohpfkyrkdbd\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"vm\":{\"principalId\":\"kmnwqjnobaiyhddv\",\"clientId\":\"cegfnmntfp\"},\"fukuvsjcswsmystu\":{\"principalId\":\"fnczdwvvbalx\",\"clientId\":\"lchpodbzevwrdn\"}}},\"location\":\"qypfcv\",\"id\":\"rchpqbmfpjbabwid\",\"name\":\"cxsspuunnoxyh\",\"type\":\"xgqddrih\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("fttsttk", "lahb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uuwhcjyxcc", response.iterator().next().tags().get("bvpa"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("qypfcv", response.iterator().next().location());
        Assertions.assertEquals("zukxitmmqtgqq", response.iterator().next().version());
        Assertions.assertEquals("rnxrxcpj", response.iterator().next().parameters().get("isavok"));
        Assertions.assertEquals(false,
            response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(764088106,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1169093946,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1135299409,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(713204380,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1147241204,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qfkuvscxkdmli")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1219308694,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qfkuvscxkdmli")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1442492241,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("qfkuvscxkdmli")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("rxkpmloazuruoc",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("goorbteo",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("bfhjxakvvjgsl",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("r",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("il",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(4699671859850911433L,
            response.iterator().next().upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(2397311129400397153L,
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals("abgyvudt", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("uewbc", response.iterator().next().managedIdentities().get(0).principalId());
    }
}
