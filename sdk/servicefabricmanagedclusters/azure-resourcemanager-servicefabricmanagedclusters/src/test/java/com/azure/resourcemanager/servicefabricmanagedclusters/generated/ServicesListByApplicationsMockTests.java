// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByApplicationsMockTests {
    @Test
    public void testListByApplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"kssjhoiftxfk\",\"serviceTypeName\":\"wegprh\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"lucbiqtgdqohm\",\"placementConstraints\":\"sldrizetpwbral\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"phbqz\"}],\"serviceLoadMetrics\":[{\"name\":\"aka\",\"weight\":\"Medium\",\"primaryDefaultLoad\":993535160,\"secondaryDefaultLoad\":1129885411,\"defaultLoad\":1728557454},{\"name\":\"zhajoylhjlmuo\",\"weight\":\"Low\",\"primaryDefaultLoad\":1359393111,\"secondaryDefaultLoad\":535947777,\"defaultLoad\":1631755461},{\"name\":\"pteecjme\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1157129881,\"secondaryDefaultLoad\":1491198323,\"defaultLoad\":605795253}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"thwtzol\":\"weoohguufuzboyj\",\"mwmdxmebwjscjpa\":\"a\"},\"location\":\"xveabf\",\"id\":\"nmwmqtibx\",\"name\":\"ijddtvqc\",\"type\":\"tad\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ServiceResource> response = manager.services()
            .listByApplications("ppipifhpfeoa", "vgcxtx", "csheafidltugsr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sldrizetpwbral", response.iterator().next().properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.iterator().next().properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("phbqz",
            response.iterator().next().properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("aka", response.iterator().next().properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            response.iterator().next().properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(993535160,
            response.iterator().next().properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1129885411,
            response.iterator().next().properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1728557454,
            response.iterator().next().properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, response.iterator().next().properties().defaultMoveCost());
        Assertions.assertEquals("wegprh", response.iterator().next().properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            response.iterator().next().properties().servicePackageActivationMode());
        Assertions.assertEquals("lucbiqtgdqohm", response.iterator().next().properties().serviceDnsName());
        Assertions.assertEquals("weoohguufuzboyj", response.iterator().next().tags().get("thwtzol"));
        Assertions.assertEquals("xveabf", response.iterator().next().location());
    }
}
