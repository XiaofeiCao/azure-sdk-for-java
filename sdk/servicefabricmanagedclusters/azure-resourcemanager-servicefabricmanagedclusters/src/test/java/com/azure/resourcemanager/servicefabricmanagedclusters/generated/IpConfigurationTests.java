// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model = BinaryData.fromString(
            "{\"name\":\"qncygupkvi\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"cwxqu\"},{\"id\":\"vzhfstotxhoj\"},{\"id\":\"bypel\"},{\"id\":\"uvhixbjxyfwn\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ool\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"kiwkkbnujr\"},{\"id\":\"vtylbfpncu\"},{\"id\":\"oiwiithtywub\"},{\"id\":\"bihwqknfdnt\"}],\"subnet\":{\"id\":\"hrdgoihxumwcto\"},\"privateIPAddressVersion\":\"IPv4\",\"publicIPAddressConfiguration\":{\"name\":\"luudfdlwggytsb\",\"ipTags\":[{\"ipTagType\":\"vvt\",\"tag\":\"seinqfiuf\"},{\"ipTagType\":\"qknp\",\"tag\":\"rgnepttwqmsniffc\"},{\"ipTagType\":\"mqnrojlpijnkr\",\"tag\":\"frddhcrati\"},{\"ipTagType\":\"zronasxift\",\"tag\":\"zq\"}],\"publicIPAddressVersion\":\"IPv6\"}}")
            .toObject(IpConfiguration.class);
        Assertions.assertEquals("qncygupkvi", model.name());
        Assertions.assertEquals("cwxqu", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ool", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("kiwkkbnujr", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("hrdgoihxumwcto", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("luudfdlwggytsb", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("vvt", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("seinqfiuf", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model = new IpConfiguration().withName("qncygupkvi")
            .withApplicationGatewayBackendAddressPools(
                Arrays.asList(new SubResource().withId("cwxqu"), new SubResource().withId("vzhfstotxhoj"),
                    new SubResource().withId("bypel"), new SubResource().withId("uvhixbjxyfwn")))
            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("ool")))
            .withLoadBalancerInboundNatPools(
                Arrays.asList(new SubResource().withId("kiwkkbnujr"), new SubResource().withId("vtylbfpncu"),
                    new SubResource().withId("oiwiithtywub"), new SubResource().withId("bihwqknfdnt")))
            .withSubnet(new SubResource().withId("hrdgoihxumwcto"))
            .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV4)
            .withPublicIPAddressConfiguration(
                new IPConfigurationPublicIPAddressConfiguration().withName("luudfdlwggytsb")
                    .withIpTags(Arrays.asList(new IpTag().withIpTagType("vvt").withTag("seinqfiuf"),
                        new IpTag().withIpTagType("qknp").withTag("rgnepttwqmsniffc"),
                        new IpTag().withIpTagType("mqnrojlpijnkr").withTag("frddhcrati"),
                        new IpTag().withIpTagType("zronasxift").withTag("zq")))
                    .withPublicIPAddressVersion(PublicIPAddressVersion.IPV6));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("qncygupkvi", model.name());
        Assertions.assertEquals("cwxqu", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ool", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("kiwkkbnujr", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("hrdgoihxumwcto", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("luudfdlwggytsb", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("vvt", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("seinqfiuf", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
