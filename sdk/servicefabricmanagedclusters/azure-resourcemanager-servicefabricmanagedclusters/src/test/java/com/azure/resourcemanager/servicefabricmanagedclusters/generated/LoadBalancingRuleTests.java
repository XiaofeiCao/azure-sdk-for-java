// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.LoadBalancingRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ProbeProtocol;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Protocol;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancingRule model = BinaryData.fromString(
            "{\"frontendPort\":2009471016,\"backendPort\":678747249,\"protocol\":\"udp\",\"probePort\":200190444,\"probeProtocol\":\"http\",\"probeRequestPath\":\"ytgadgvraeaene\",\"loadDistribution\":\"zar\"}")
            .toObject(LoadBalancingRule.class);
        Assertions.assertEquals(2009471016, model.frontendPort());
        Assertions.assertEquals(678747249, model.backendPort());
        Assertions.assertEquals(Protocol.UDP, model.protocol());
        Assertions.assertEquals(200190444, model.probePort());
        Assertions.assertEquals(ProbeProtocol.HTTP, model.probeProtocol());
        Assertions.assertEquals("ytgadgvraeaene", model.probeRequestPath());
        Assertions.assertEquals("zar", model.loadDistribution());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancingRule model = new LoadBalancingRule().withFrontendPort(2009471016)
            .withBackendPort(678747249)
            .withProtocol(Protocol.UDP)
            .withProbePort(200190444)
            .withProbeProtocol(ProbeProtocol.HTTP)
            .withProbeRequestPath("ytgadgvraeaene")
            .withLoadDistribution("zar");
        model = BinaryData.fromObject(model).toObject(LoadBalancingRule.class);
        Assertions.assertEquals(2009471016, model.frontendPort());
        Assertions.assertEquals(678747249, model.backendPort());
        Assertions.assertEquals(Protocol.UDP, model.protocol());
        Assertions.assertEquals(200190444, model.probePort());
        Assertions.assertEquals(ProbeProtocol.HTTP, model.probeProtocol());
        Assertions.assertEquals("ytgadgvraeaene", model.probeRequestPath());
        Assertions.assertEquals("zar", model.loadDistribution());
    }
}
