// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeSku;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NodeTypeUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NodeTypeUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"wnopqgikyzirtx\":\"f\",\"ilqu\":\"yuxzejntpsewgi\",\"eoxorggufhyao\":\"rydxtqm\",\"ovjzhpjbibgjmfx\":\"tbghhavgrvkf\"},\"sku\":{\"name\":\"fcluyov\",\"tier\":\"nbkfezzxscy\",\"capacity\":1049573139}}")
            .toObject(NodeTypeUpdateParameters.class);
        Assertions.assertEquals("f", model.tags().get("wnopqgikyzirtx"));
        Assertions.assertEquals("fcluyov", model.sku().name());
        Assertions.assertEquals("nbkfezzxscy", model.sku().tier());
        Assertions.assertEquals(1049573139, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NodeTypeUpdateParameters model = new NodeTypeUpdateParameters()
            .withTags(mapOf("wnopqgikyzirtx", "f", "ilqu", "yuxzejntpsewgi", "eoxorggufhyao", "rydxtqm",
                "ovjzhpjbibgjmfx", "tbghhavgrvkf"))
            .withSku(new NodeTypeSku().withName("fcluyov").withTier("nbkfezzxscy").withCapacity(1049573139));
        model = BinaryData.fromObject(model).toObject(NodeTypeUpdateParameters.class);
        Assertions.assertEquals("f", model.tags().get("wnopqgikyzirtx"));
        Assertions.assertEquals("fcluyov", model.sku().name());
        Assertions.assertEquals("nbkfezzxscy", model.sku().tier());
        Assertions.assertEquals(1049573139, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
