// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationDetails;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Fault simulation object with status.
 */
@Fluent
public final class FaultSimulationInner implements JsonSerializable<FaultSimulationInner> {
    /*
     * unique identifier for the fault simulation.
     */
    private String simulationId;

    /*
     * Fault simulation status
     */
    private FaultSimulationStatus status;

    /*
     * The start time of the fault simulation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the fault simulation.
     */
    private OffsetDateTime endTime;

    /*
     * Fault simulation details
     */
    private FaultSimulationDetails details;

    /**
     * Creates an instance of FaultSimulationInner class.
     */
    public FaultSimulationInner() {
    }

    /**
     * Get the simulationId property: unique identifier for the fault simulation.
     * 
     * @return the simulationId value.
     */
    public String simulationId() {
        return this.simulationId;
    }

    /**
     * Set the simulationId property: unique identifier for the fault simulation.
     * 
     * @param simulationId the simulationId value to set.
     * @return the FaultSimulationInner object itself.
     */
    public FaultSimulationInner withSimulationId(String simulationId) {
        this.simulationId = simulationId;
        return this;
    }

    /**
     * Get the status property: Fault simulation status.
     * 
     * @return the status value.
     */
    public FaultSimulationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Fault simulation status.
     * 
     * @param status the status value to set.
     * @return the FaultSimulationInner object itself.
     */
    public FaultSimulationInner withStatus(FaultSimulationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTime property: The start time of the fault simulation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the fault simulation.
     * 
     * @param startTime the startTime value to set.
     * @return the FaultSimulationInner object itself.
     */
    public FaultSimulationInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the fault simulation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the fault simulation.
     * 
     * @param endTime the endTime value to set.
     * @return the FaultSimulationInner object itself.
     */
    public FaultSimulationInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the details property: Fault simulation details.
     * 
     * @return the details value.
     */
    public FaultSimulationDetails details() {
        return this.details;
    }

    /**
     * Set the details property: Fault simulation details.
     * 
     * @param details the details value to set.
     * @return the FaultSimulationInner object itself.
     */
    public FaultSimulationInner withDetails(FaultSimulationDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (details() != null) {
            details().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("simulationId", this.simulationId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("details", this.details);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaultSimulationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaultSimulationInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FaultSimulationInner.
     */
    public static FaultSimulationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaultSimulationInner deserializedFaultSimulationInner = new FaultSimulationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("simulationId".equals(fieldName)) {
                    deserializedFaultSimulationInner.simulationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedFaultSimulationInner.status = FaultSimulationStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedFaultSimulationInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedFaultSimulationInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("details".equals(fieldName)) {
                    deserializedFaultSimulationInner.details = FaultSimulationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFaultSimulationInner;
        });
    }
}
