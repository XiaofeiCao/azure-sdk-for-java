// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolInner;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolProperties;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictionsProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"maximumConcurrency\":1002767653,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"datatttxfvjrb\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"phxepcyvahf\"},\"identity\":{\"principalId\":\"dd7600cd-8ec3-4022-abe4-71291eeabbbe\",\"tenantId\":\"5c68d70f-72f9-4d01-baa8-d07034ceb1ec\",\"type\":\"None\",\"userAssignedIdentities\":{\"uujqgidokgjljyo\":{\"principalId\":\"9c207222-70cb-4521-9d05-b14b2655f933\",\"clientId\":\"9f62a707-49b1-41b3-aeb2-0ac4f0f564f6\"},\"cltbgsncghkjesz\":{\"principalId\":\"53397fb4-99d2-4878-8e1f-b4e09e82b2b6\",\"clientId\":\"0789d784-b889-4e26-bba5-951f789ec151\"},\"ijhtxf\":{\"principalId\":\"452e42bd-9152-4490-8744-948c5df5d017\",\"clientId\":\"ea263be0-61fd-417c-a599-b1d26da8852c\"},\"bfs\":{\"principalId\":\"2eeef1a1-6328-4eb4-abaf-7e12ab90eda9\",\"clientId\":\"a78afbb1-48be-42d5-a4a4-11805b5852a6\"}}},\"location\":\"nehmpvecx\",\"tags\":{\"ukgri\":\"ebfqkkrbm\",\"fbxzpuzycisp\":\"flz\",\"y\":\"qzahmgkbrp\",\"rgvtqag\":\"hibnuqqkpika\"},\"id\":\"buynhijggm\",\"name\":\"bfs\",\"type\":\"arbu\"}")
            .toObject(PoolInner.class);
        Assertions.assertEquals("nehmpvecx", model.location());
        Assertions.assertEquals("ebfqkkrbm", model.tags().get("ukgri"));
        Assertions.assertEquals(ProvisioningState.ACCEPTED, model.properties().provisioningState());
        Assertions.assertEquals(1002767653, model.properties().maximumConcurrency());
        Assertions.assertEquals("phxepcyvahf", model.properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolInner model = new PoolInner().withLocation("nehmpvecx")
            .withTags(mapOf("ukgri", "ebfqkkrbm", "fbxzpuzycisp", "flz", "y", "qzahmgkbrp", "rgvtqag", "hibnuqqkpika"))
            .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.ACCEPTED)
                .withMaximumConcurrency(1002767653)
                .withOrganizationProfile(new OrganizationProfile())
                .withAgentProfile(new AgentProfile().withResourcePredictions("datatttxfvjrb")
                    .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                .withFabricProfile(new FabricProfile())
                .withDevCenterProjectResourceId("phxepcyvahf"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("uujqgidokgjljyo", new UserAssignedIdentity(), "cltbgsncghkjesz",
                        new UserAssignedIdentity(), "ijhtxf", new UserAssignedIdentity(), "bfs",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(PoolInner.class);
        Assertions.assertEquals("nehmpvecx", model.location());
        Assertions.assertEquals("ebfqkkrbm", model.tags().get("ukgri"));
        Assertions.assertEquals(ProvisioningState.ACCEPTED, model.properties().provisioningState());
        Assertions.assertEquals(1002767653, model.properties().maximumConcurrency());
        Assertions.assertEquals("phxepcyvahf", model.properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
