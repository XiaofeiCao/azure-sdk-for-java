// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolInner;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolListResult;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolProperties;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictionsProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PoolListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"maximumConcurrency\":830050857,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"datakiiuxhqyudxor\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"nbpoczvyifqrvkdv\"},\"identity\":{\"principalId\":\"4c174292-808d-42cf-823c-fb7ad04448c4\",\"tenantId\":\"11130762-4c3c-4123-b6e3-2486ba861878\",\"type\":\"None\",\"userAssignedIdentities\":{\"f\":{\"principalId\":\"8ccce086-6944-4475-b1a3-ff54d601d238\",\"clientId\":\"aae4e211-b27f-4e89-8dc5-e9aab420dae7\"},\"kpnpulexxbczwtr\":{\"principalId\":\"f95d4ff1-9de1-4536-b383-97ff8a11e735\",\"clientId\":\"751b6c94-1ea4-4d07-9040-f8e8ea3000ea\"},\"qzbqjvsov\":{\"principalId\":\"4fae8c83-ded8-4d5b-bfc2-063ad2dd70b6\",\"clientId\":\"7ad0deec-4878-4764-8516-73b90850637f\"},\"kacspkw\":{\"principalId\":\"6b1a0299-bd4b-4c64-b4fc-88e52a8371af\",\"clientId\":\"70593afd-5f8e-4bfe-b1ce-7a29d3499033\"}}},\"location\":\"zdobpxjmflbvvnch\",\"tags\":{\"ajiwkuo\":\"ciwwzjuqkhr\"},\"id\":\"oskg\",\"name\":\"sauuimj\",\"type\":\"vxieduugidyj\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"maximumConcurrency\":207335442,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"dataosvexcsonpclhoc\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"slkevle\"},\"identity\":{\"principalId\":\"499711d0-12a5-45b4-8299-9ae272111b40\",\"tenantId\":\"ce754895-45c8-4fc1-bac5-1960b2232e7f\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"vfaxkffeiith\":{\"principalId\":\"f47a03ce-a821-4299-8318-ed3ec31e277e\",\"clientId\":\"84ecf615-8f05-4f37-8395-400ccecb2598\"},\"ez\":{\"principalId\":\"f01804a3-6ee4-40c3-80dc-cb981c31d1c4\",\"clientId\":\"bdb326d8-ac8f-4631-aca0-918bf8a1c498\"},\"hxmzsbbzoggig\":{\"principalId\":\"39433660-4731-4810-893d-d7210d7ff121\",\"clientId\":\"7310cfd3-6606-4f3c-82f3-eb25484f0d37\"}}},\"location\":\"wburvjxxjnspydpt\",\"tags\":{\"udwtiukbl\":\"nkoukn\",\"o\":\"ngkpocipazy\",\"ntypmrbpizcdrqj\":\"gukgjnpiucgygevq\"},\"id\":\"dpydn\",\"name\":\"yhxdeoejzicwi\",\"type\":\"sjttgzfbish\"},{\"properties\":{\"provisioningState\":\"Failed\",\"maximumConcurrency\":1409405599,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"datadeyeamdphagalpbu\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"gipwhonowkg\"},\"identity\":{\"principalId\":\"a5cbbc20-6198-435b-b91f-fd9f68b73238\",\"tenantId\":\"16d4fdd2-8f79-488e-b483-41375d4b900f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"bin\":{\"principalId\":\"c617efc0-f8bf-4373-9b91-7e1abc15c9a1\",\"clientId\":\"a7d5b413-e139-4eca-882c-a7c96f090492\"},\"uttmrywnuzoqft\":{\"principalId\":\"f36165f3-6edc-47fd-a228-7956500b17c4\",\"clientId\":\"e2716bb1-393b-4ded-a7ce-b5e2fb3566ce\"},\"zrnkcqvyxlwh\":{\"principalId\":\"25f4d6ff-5017-4747-9cce-f5f506574ef8\",\"clientId\":\"6ac1f30b-d3b6-4b1b-9ebe-e322bbc363ea\"},\"icohoqqnwvl\":{\"principalId\":\"baadc094-0bb9-4290-8ac7-7292eebb799d\",\"clientId\":\"c0d896f1-7fce-4b18-a63f-8935b588395d\"}}},\"location\":\"avwhheunm\",\"tags\":{\"noc\":\"gyxzk\",\"uconuqszfkbey\":\"koklya\",\"senhwlrs\":\"ewrmjmwvvjektc\"},\"id\":\"frzpwvlqdqgb\",\"name\":\"qylihkaetckt\",\"type\":\"fcivfsnkym\"}],\"nextLink\":\"tqhjfbebrjcx\"}")
            .toObject(PoolListResult.class);
        Assertions.assertEquals("zdobpxjmflbvvnch", model.value().get(0).location());
        Assertions.assertEquals("ciwwzjuqkhr", model.value().get(0).tags().get("ajiwkuo"));
        Assertions.assertEquals(ProvisioningState.DELETING, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(830050857, model.value().get(0).properties().maximumConcurrency());
        Assertions.assertEquals("nbpoczvyifqrvkdv", model.value().get(0).properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("tqhjfbebrjcx", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolListResult model
            = new PoolListResult()
                .withValue(
                    Arrays.asList(
                        new PoolInner()
                            .withLocation("zdobpxjmflbvvnch")
                            .withTags(mapOf("ajiwkuo", "ciwwzjuqkhr"))
                            .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.DELETING)
                                .withMaximumConcurrency(830050857)
                                .withOrganizationProfile(new OrganizationProfile())
                                .withAgentProfile(new AgentProfile().withResourcePredictions("datakiiuxhqyudxor")
                                    .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                                .withFabricProfile(new FabricProfile())
                                .withDevCenterProjectResourceId("nbpoczvyifqrvkdv"))
                            .withIdentity(new ManagedServiceIdentity()
                                .withType(ManagedServiceIdentityType.NONE)
                                .withUserAssignedIdentities(mapOf("f", new UserAssignedIdentity(), "kpnpulexxbczwtr",
                                    new UserAssignedIdentity(), "qzbqjvsov", new UserAssignedIdentity(), "kacspkw",
                                    new UserAssignedIdentity()))),
                        new PoolInner().withLocation("wburvjxxjnspydpt")
                            .withTags(
                                mapOf("udwtiukbl", "nkoukn", "o", "ngkpocipazy", "ntypmrbpizcdrqj", "gukgjnpiucgygevq"))
                            .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.ACCEPTED)
                                .withMaximumConcurrency(207335442)
                                .withOrganizationProfile(new OrganizationProfile())
                                .withAgentProfile(new AgentProfile().withResourcePredictions("dataosvexcsonpclhoc")
                                    .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                                .withFabricProfile(new FabricProfile())
                                .withDevCenterProjectResourceId("slkevle"))
                            .withIdentity(new ManagedServiceIdentity()
                                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                .withUserAssignedIdentities(mapOf("vfaxkffeiith", new UserAssignedIdentity(), "ez",
                                    new UserAssignedIdentity(), "hxmzsbbzoggig", new UserAssignedIdentity()))),
                        new PoolInner().withLocation("avwhheunm")
                            .withTags(mapOf("noc", "gyxzk", "uconuqszfkbey", "koklya", "senhwlrs", "ewrmjmwvvjektc"))
                            .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.FAILED)
                                .withMaximumConcurrency(1409405599)
                                .withOrganizationProfile(new OrganizationProfile())
                                .withAgentProfile(new AgentProfile().withResourcePredictions("datadeyeamdphagalpbu")
                                    .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                                .withFabricProfile(new FabricProfile())
                                .withDevCenterProjectResourceId("gipwhonowkg"))
                            .withIdentity(
                                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                                    .withUserAssignedIdentities(mapOf("bin", new UserAssignedIdentity(),
                                        "uttmrywnuzoqft", new UserAssignedIdentity(), "zrnkcqvyxlwh",
                                        new UserAssignedIdentity(), "icohoqqnwvl", new UserAssignedIdentity())))))
                .withNextLink("tqhjfbebrjcx");
        model = BinaryData.fromObject(model).toObject(PoolListResult.class);
        Assertions.assertEquals("zdobpxjmflbvvnch", model.value().get(0).location());
        Assertions.assertEquals("ciwwzjuqkhr", model.value().get(0).tags().get("ajiwkuo"));
        Assertions.assertEquals(ProvisioningState.DELETING, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(830050857, model.value().get(0).properties().maximumConcurrency());
        Assertions.assertEquals("nbpoczvyifqrvkdv", model.value().get(0).properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("tqhjfbebrjcx", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
