// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfileUpdate;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolUpdate;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolUpdateProperties;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictionsProfileUpdate;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PoolUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"f9bc1b9a-c246-4b64-b33d-1c4f0bcb34e2\",\"tenantId\":\"8c7aa50e-59f5-4dd4-8925-d045d81dfb8f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"vgyuguos\":{\"principalId\":\"f17191b2-631c-4c59-89f4-db2649142bcb\",\"clientId\":\"173cab4b-36bd-42de-bae4-f88d8c312212\"},\"fssxqukkfplg\":{\"principalId\":\"c646e8eb-4708-49b8-bd2e-f86eef895275\",\"clientId\":\"2327bf97-3bb9-4a12-aec2-8737a72a8de3\"},\"xnkjzkdesl\":{\"principalId\":\"4128230b-ffca-4d8b-8e8e-009a09908854\",\"clientId\":\"84171586-e9d0-458f-8f2d-5f0a8e22ce85\"}}},\"tags\":{\"ighxpk\":\"opwi\",\"baumnyqupedeoj\":\"wzbaiue\"},\"properties\":{\"provisioningState\":\"Deleting\",\"maximumConcurrency\":1650881541,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfileUpdate\",\"resourcePredictions\":\"dataxpsiebtfhvpes\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfileUpdate\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"rdqmhjjdhtldwkyz\"}}")
            .toObject(PoolUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("opwi", model.tags().get("ighxpk"));
        Assertions.assertEquals(ProvisioningState.DELETING, model.properties().provisioningState());
        Assertions.assertEquals(1650881541, model.properties().maximumConcurrency());
        Assertions.assertEquals("rdqmhjjdhtldwkyz", model.properties().devCenterProjectResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolUpdate model = new PoolUpdate()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("vgyuguos", new UserAssignedIdentity(), "fssxqukkfplg",
                    new UserAssignedIdentity(), "xnkjzkdesl", new UserAssignedIdentity())))
            .withTags(mapOf("ighxpk", "opwi", "baumnyqupedeoj", "wzbaiue"))
            .withProperties(new PoolUpdateProperties().withProvisioningState(ProvisioningState.DELETING)
                .withMaximumConcurrency(1650881541)
                .withOrganizationProfile(new OrganizationProfile())
                .withAgentProfile(new AgentProfileUpdate().withResourcePredictions("dataxpsiebtfhvpes")
                    .withResourcePredictionsProfile(new ResourcePredictionsProfileUpdate()))
                .withFabricProfile(new FabricProfile())
                .withDevCenterProjectResourceId("rdqmhjjdhtldwkyz"));
        model = BinaryData.fromObject(model).toObject(PoolUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("opwi", model.tags().get("ighxpk"));
        Assertions.assertEquals(ProvisioningState.DELETING, model.properties().provisioningState());
        Assertions.assertEquals(1650881541, model.properties().maximumConcurrency());
        Assertions.assertEquals("rdqmhjjdhtldwkyz", model.properties().devCenterProjectResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
