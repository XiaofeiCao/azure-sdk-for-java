// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devopsinfrastructure.DevOpsInfrastructureManager;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.Pool;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolProperties;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictionsProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"maximumConcurrency\":1989622567,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"datap\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"ulpiuj\"},\"identity\":{\"principalId\":\"e2e9e596-7e05-42c2-a6e5-69f18309f838\",\"tenantId\":\"6e7b4963-32c2-4d64-af33-de59e2613bcc\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"obyu\":{\"principalId\":\"7d251f03-8aeb-4732-b625-e572390c2146\",\"clientId\":\"2b43cd39-12e2-4ec5-b106-367d82136c8c\"},\"pqlpq\":{\"principalId\":\"d1d90126-5f9c-4242-84b6-c0f404ad160c\",\"clientId\":\"63d3b285-abbd-454c-8eb4-2955881b3837\"},\"iuqgbdbutauv\":{\"principalId\":\"3860d37b-e159-408c-adb8-2a4c50a37de5\",\"clientId\":\"97e9f59d-cc81-439b-9a9e-07482808fd4e\"}}},\"location\":\"tkuwhhmhykojo\",\"tags\":{\"lpichk\":\"nn\",\"kkpwdreqnovvq\":\"ymkcdyhb\"},\"id\":\"ovljxywsu\",\"name\":\"syrsndsytgadgvra\",\"type\":\"aeneqnzarrwl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevOpsInfrastructureManager manager = DevOpsInfrastructureManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Pool response = manager.pools()
            .define("gkopkwhojvpajqgx")
            .withRegion("i")
            .withExistingResourceGroup("mquxvypo")
            .withTags(mapOf("hwflu", "qyib"))
            .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.UPDATING)
                .withMaximumConcurrency(146904581)
                .withOrganizationProfile(new OrganizationProfile())
                .withAgentProfile(new AgentProfile().withResourcePredictions("databq")
                    .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                .withFabricProfile(new FabricProfile())
                .withDevCenterProjectResourceId("vmkcx"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("prglya", new UserAssignedIdentity(), "ckcb", new UserAssignedIdentity(),
                            "jrjxgciqibrhosx", new UserAssignedIdentity(), "rhzo", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("tkuwhhmhykojo", response.location());
        Assertions.assertEquals("nn", response.tags().get("lpichk"));
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals(1989622567, response.properties().maximumConcurrency());
        Assertions.assertEquals("ulpiuj", response.properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
