// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.DataProductNetworkAcls;
import com.azure.resourcemanager.networkanalytics.models.DefaultAction;
import com.azure.resourcemanager.networkanalytics.models.IPRules;
import com.azure.resourcemanager.networkanalytics.models.VirtualNetworkRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataProductNetworkAclsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductNetworkAcls model = BinaryData.fromString(
            "{\"virtualNetworkRule\":[{\"id\":\"hm\",\"action\":\"u\",\"state\":\"a\"},{\"id\":\"hrzayvvtpgvdf\",\"action\":\"otkftutqxlngx\",\"state\":\"fgugnxkrxdqmid\"}],\"ipRules\":[{\"value\":\"zrvqdr\",\"action\":\"bhj\"}],\"allowedQueryIpRangeList\":[\"igeho\"],\"defaultAction\":\"Deny\"}")
            .toObject(DataProductNetworkAcls.class);
        Assertions.assertEquals("hm", model.virtualNetworkRule().get(0).id());
        Assertions.assertEquals("u", model.virtualNetworkRule().get(0).action());
        Assertions.assertEquals("a", model.virtualNetworkRule().get(0).state());
        Assertions.assertEquals("zrvqdr", model.ipRules().get(0).value());
        Assertions.assertEquals("bhj", model.ipRules().get(0).action());
        Assertions.assertEquals("igeho", model.allowedQueryIpRangeList().get(0));
        Assertions.assertEquals(DefaultAction.DENY, model.defaultAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductNetworkAcls model = new DataProductNetworkAcls()
            .withVirtualNetworkRule(Arrays.asList(new VirtualNetworkRule().withId("hm").withAction("u").withState("a"),
                new VirtualNetworkRule().withId("hrzayvvtpgvdf")
                    .withAction("otkftutqxlngx")
                    .withState("fgugnxkrxdqmid")))
            .withIpRules(Arrays.asList(new IPRules().withValue("zrvqdr").withAction("bhj")))
            .withAllowedQueryIpRangeList(Arrays.asList("igeho"))
            .withDefaultAction(DefaultAction.DENY);
        model = BinaryData.fromObject(model).toObject(DataProductNetworkAcls.class);
        Assertions.assertEquals("hm", model.virtualNetworkRule().get(0).id());
        Assertions.assertEquals("u", model.virtualNetworkRule().get(0).action());
        Assertions.assertEquals("a", model.virtualNetworkRule().get(0).state());
        Assertions.assertEquals("zrvqdr", model.ipRules().get(0).value());
        Assertions.assertEquals("bhj", model.ipRules().get(0).action());
        Assertions.assertEquals("igeho", model.allowedQueryIpRangeList().get(0));
        Assertions.assertEquals(DefaultAction.DENY, model.defaultAction());
    }
}
