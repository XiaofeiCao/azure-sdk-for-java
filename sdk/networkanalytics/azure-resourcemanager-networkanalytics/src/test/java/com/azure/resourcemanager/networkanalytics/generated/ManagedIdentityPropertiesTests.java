// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ManagedIdentityProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedIdentityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedIdentityProperties model = BinaryData.fromString(
            "{\"tenantId\":\"qqwx\",\"principalId\":\"feallnwsu\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"kvlrxnj\":{\"clientId\":\"ampmngnz\",\"principalId\":\"xaqwoochcbonqv\"},\"enjbdlwtgrhp\":{\"clientId\":\"seiphe\",\"principalId\":\"lokeyy\"}}}")
            .toObject(ManagedIdentityProperties.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("ampmngnz", model.userAssignedIdentities().get("kvlrxnj").clientId());
        Assertions.assertEquals("xaqwoochcbonqv", model.userAssignedIdentities().get("kvlrxnj").principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedIdentityProperties model
            = new ManagedIdentityProperties().withType(ManagedIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("kvlrxnj",
                    new UserAssignedIdentity().withClientId("ampmngnz").withPrincipalId("xaqwoochcbonqv"),
                    "enjbdlwtgrhp", new UserAssignedIdentity().withClientId("seiphe").withPrincipalId("lokeyy")));
        model = BinaryData.fromObject(model).toObject(ManagedIdentityProperties.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("ampmngnz", model.userAssignedIdentities().get("kvlrxnj").clientId());
        Assertions.assertEquals("xaqwoochcbonqv", model.userAssignedIdentities().get("kvlrxnj").principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
