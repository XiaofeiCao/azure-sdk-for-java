// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdateProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedIdentityProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"tenantId\":\"e\",\"principalId\":\"zzvdudgwds\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"cftadeh\":{\"clientId\":\"wmc\",\"principalId\":\"pwlbjnpg\"},\"ej\":{\"clientId\":\"ltyfsop\",\"principalId\":\"suesnzw\"}}},\"tags\":{\"xdn\":\"orxzdmohctbqvud\",\"wdkcglhsl\":\"nvowgujju\",\"yggdtjixh\":\"zj\"},\"properties\":{\"owners\":[\"fqweykhmene\",\"fyexfwhy\",\"cibvyvdcsitynn\",\"amdecte\"],\"purviewAccount\":\"iqscjeypv\",\"purviewCollection\":\"zrkgqhcjrefovg\",\"privateLinksEnabled\":\"Enabled\",\"currentMinorVersion\":\"leyyvx\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("wmc", model.identity().userAssignedIdentities().get("cftadeh").clientId());
        Assertions.assertEquals("pwlbjnpg", model.identity().userAssignedIdentities().get("cftadeh").principalId());
        Assertions.assertEquals("orxzdmohctbqvud", model.tags().get("xdn"));
        Assertions.assertEquals("fqweykhmene", model.properties().owners().get(0));
        Assertions.assertEquals("iqscjeypv", model.properties().purviewAccount());
        Assertions.assertEquals("zrkgqhcjrefovg", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.ENABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("leyyvx", model.properties().currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate()
            .withIdentity(new ManagedIdentityProperties().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("cftadeh", new UserAssignedIdentity().withClientId("wmc").withPrincipalId("pwlbjnpg"), "ej",
                        new UserAssignedIdentity().withClientId("ltyfsop").withPrincipalId("suesnzw"))))
            .withTags(mapOf("xdn", "orxzdmohctbqvud", "wdkcglhsl", "nvowgujju", "yggdtjixh", "zj"))
            .withProperties(new DataProductUpdateProperties()
                .withOwners(Arrays.asList("fqweykhmene", "fyexfwhy", "cibvyvdcsitynn", "amdecte"))
                .withPurviewAccount("iqscjeypv")
                .withPurviewCollection("zrkgqhcjrefovg")
                .withPrivateLinksEnabled(ControlState.ENABLED)
                .withCurrentMinorVersion("leyyvx"));
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("wmc", model.identity().userAssignedIdentities().get("cftadeh").clientId());
        Assertions.assertEquals("pwlbjnpg", model.identity().userAssignedIdentities().get("cftadeh").principalId());
        Assertions.assertEquals("orxzdmohctbqvud", model.tags().get("xdn"));
        Assertions.assertEquals("fqweykhmene", model.properties().owners().get(0));
        Assertions.assertEquals("iqscjeypv", model.properties().purviewAccount());
        Assertions.assertEquals("zrkgqhcjrefovg", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.ENABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("leyyvx", model.properties().currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
