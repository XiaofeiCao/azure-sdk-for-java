// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.keyvault.KeyVaultManager;
import com.azure.resourcemanager.keyvault.fluent.models.VaultInner;
import com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource;
import com.azure.resourcemanager.resources.fluentcore.arm.models.PrivateEndpointConnection;
import com.azure.resourcemanager.resources.fluentcore.model.Appliable;
import com.azure.resourcemanager.resources.fluentcore.model.Creatable;
import com.azure.resourcemanager.resources.fluentcore.model.Refreshable;
import com.azure.resourcemanager.resources.fluentcore.model.Updatable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.UUID;

/** Properties of the vault. */
@Fluent
public interface VaultGenerated extends GroupableResource<KeyVaultManager, VaultInner>, Refreshable<Vault>, Updatable<Vault.Update> {

    /**
     * Get the sku property: SKU details.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Get the accessPolicies property: An array of 0 to 1024 identities that have access to the key vault. All
     * identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to
     * `recover`, access policies are not required. Otherwise, access policies are required.
     *
     * @return the accessPolicies value.
     */
    List<AccessPolicyEntry> accessPolicies();

    /**
     * Get the vaultUri property: The URI of the vault for performing operations on keys and secrets.
     *
     * @return the vaultUri value.
     */
    String vaultUri();

    /**
     * Get the hsmPoolResourceId property: The resource id of HSM Pool.
     *
     * @return the hsmPoolResourceId value.
     */
    String hsmPoolResourceId();

    /**
     * Get the enabledForDeployment property: Property to specify whether Azure Virtual Machines are permitted to
     * retrieve certificates stored as secrets from the key vault.
     *
     * @return the enabledForDeployment value.
     */
    Boolean enabledForDeployment();

    /**
     * Get the enabledForDiskEncryption property: Property to specify whether Azure Disk Encryption is permitted to
     * retrieve secrets from the vault and unwrap keys.
     *
     * @return the enabledForDiskEncryption value.
     */
    Boolean enabledForDiskEncryption();

    /**
     * Get the enabledForTemplateDeployment property: Property to specify whether Azure Resource Manager is permitted to
     * retrieve secrets from the key vault.
     *
     * @return the enabledForTemplateDeployment value.
     */
    Boolean enabledForTemplateDeployment();

    /**
     * Get the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true
     * by default. Once set to true, it cannot be reverted to false.
     *
     * @return the enableSoftDelete value.
     */
    Boolean softDeleteEnabled();

    /**
     * Get the softDeleteRetentionInDays property: softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     *
     * @return the softDeleteRetentionInDays value.
     */
    Boolean softDeleteRetentionInDays();

    /**
     * Get the enableRbacAuthorization property: Property that controls how data actions are authorized. When true, the
     * key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies
     * specified in vault properties will be ignored. When false, the key vault will use the access policies specified
     * in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified,
     * the vault is created with the default value of false. Note that management actions are always authorized with
     * RBAC.
     *
     * @return the enableRbacAuthorization value.
     */
    Boolean roleBasedAccessControlEnabled();

    /**
     * Get the createMode property: The vault's create mode to indicate whether the vault need to be recovered or not.
     *
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * Get the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * vault. Setting this property to true activates protection against purge for this vault and its content - only the
     * Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is
     * also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its
     * value.
     *
     * @return the enablePurgeProtection value.
     */
    Boolean purgeProtectionEnabled();

    /**
     * Get the networkAcls property: Rules governing the accessibility of the key vault from specific network locations.
     *
     * @return the networkAcls value.
     */
    NetworkRuleSet networkRuleSet();

    /**
     * Get the provisioningState property: Provisioning state of the vault.
     *
     * @return the provisioningState value.
     */
    VaultProvisioningState provisioningState();

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the key vault.
     *
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnectionItem> privateEndpointConnections();

    /**
     * Get the publicNetworkAccess property: Property to specify whether the vault will accept traffic from public
     * internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted
     * services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are
     * present we will not honor the rules.
     *
     * @return the publicNetworkAccess value.
     */
    String publicNetworkAccess();

    interface Definition
        extends DefinitionStages.Blank,
        DefinitionStages.WithGroup,
        DefinitionStages.WithCreate {}

    interface DefinitionStages {
        interface Blank extends DefinitionWithRegion<Vault.DefinitionStages.WithGroup> {
        }

        interface WithGroup extends GroupableResource.DefinitionStages.WithGroup<WithTenantId>{

        }

        interface WithTenantId {
            WithCreate withTenantId(UUID tenantId);
        }

        interface WithSku {
            WithCreate withSku(Sku sku);
        }

        interface WithAccessPolicies {
            WithCreate withAccessPolicies(List<AccessPolicyEntry> accessPolicies);
        }

        interface WithVaultUri {
            WithCreate withVaultUri(String vaultUri);
        }

        interface WithHsmPoolResourceId {
            WithCreate withHsmPoolResourceId(String hsmPoolResourceId);
        }

        interface WithConfiguration {
            WithCreate withDeploymentEnabled(Boolean deploymentEnabled);

            WithCreate withDiskEncryptionEnabled(Boolean diskEncryptionEnabled);

            WithCreate withTemplateDeploymentEnabled(Boolean templateDeploymentEnabled);

            WithCreate withSoftDeleteEnabled(Boolean withSoftDeleteEnabled);

            WithCreate withPurgeProtectionEnabled(Boolean purgeProtectionEnabled);
        }

        interface WithSoftDeleteRetentionInDays {
            WithCreate withSoftDeleteRetentionInDays(int softDeleteRetentionInDays);
        }

        interface WithRoleBasedAccessControlEnabled {
            WithCreate withRoleBasedAccessControlEnabled(Boolean roleBasedAccessControlEnabled);
        }

        interface WithCreateMode {
            WithCreate withCreateMode(CreateMode createMode);
        }

        interface WithNetworkRuleSet {
            WithCreate withNetworkRuleSet(NetworkRuleSet networkRuleSet);
        }

        interface WithProvisioningState {
            WithCreate withProvisioningState(VaultProvisioningState provisioningState);
        }

        interface WithPrivateEndpointConnections {
            WithCreate withPrivateEndpointConnections(List<PrivateEndpointConnection> privateEndpointConnections);
        }

        interface WithPublicNetworkAccess {
            WithCreate withPublicNetworkAccess(String publicNetworkAccess);
        }

        interface WithCreate extends Creatable<VaultGenerated>,
            WithTenantId,
            WithSku,
            WithAccessPolicies,
            WithVaultUri,
            WithHsmPoolResourceId,
            WithConfiguration,
            WithSoftDeleteRetentionInDays,
            WithRoleBasedAccessControlEnabled,
            WithCreateMode,
            WithNetworkRuleSet,
            WithProvisioningState,
            WithPrivateEndpointConnections,
            WithPublicNetworkAccess {
        }
    }

    interface UpdateStages {
        interface WithTenantId {
            Update withTenantId(UUID tenantId);
        }

        interface WithSku {
            Update withSku(Sku sku);
        }

        interface WithAccessPolicies {
            Update withAccessPolicies(List<AccessPolicyEntry> accessPolicies);
        }

        interface WithVaultUri {
            Update withVaultUri(String vaultUri);
        }

        interface WithHsmPoolResourceId {
            Update withHsmPoolResourceId(String hsmPoolResourceId);
        }

        interface WithConfiguration {
            Update withDeploymentEnabled(Boolean deploymentEnabled);

            Update withDiskEncryptionEnabled(Boolean diskEncryptionEnabled);

            Update withTemplateDeploymentEnabled(Boolean templateDeploymentEnabled);

            Update withSoftDeleteEnabled(Boolean withSoftDeleteEnabled);

            Update withPurgeProtectionEnabled(Boolean purgeProtectionEnabled);
        }

        interface WithSoftDeleteRetentionInDays {
            Update withSoftDeleteRetentionInDays(int softDeleteRetentionInDays);
        }

        interface WithRoleBasedAccessControlEnabled {
            Update withRoleBasedAccessControlEnabled(Boolean roleBasedAccessControlEnabled);
        }

        interface WithCreateMode {
            Update withCreateMode(CreateMode createMode);
        }

        interface WithNetworkRuleSet {
            Update withNetworkRuleSet(NetworkRuleSet networkRuleSet);
        }

        interface WithProvisioningState {
            Update withProvisioningState(VaultProvisioningState provisioningState);
        }

        interface WithPrivateEndpointConnections {
            Update withPrivateEndpointConnections(List<PrivateEndpointConnection> privateEndpointConnections);
        }

        interface WithPublicNetworkAccess {
            Update withPublicNetworkAccess(String publicNetworkAccess);
        }

        interface Update extends GroupableResource.UpdateWithTags<Update>,
            Appliable<VaultGenerated>,
            WithTenantId,
            WithSku,
            WithAccessPolicies,
            WithVaultUri,
            WithHsmPoolResourceId,
            WithConfiguration,
            WithSoftDeleteRetentionInDays,
            WithRoleBasedAccessControlEnabled,
            WithCreateMode,
            WithNetworkRuleSet,
            WithProvisioningState,
            WithPrivateEndpointConnections,
            WithPublicNetworkAccess {
        }
    }
}
