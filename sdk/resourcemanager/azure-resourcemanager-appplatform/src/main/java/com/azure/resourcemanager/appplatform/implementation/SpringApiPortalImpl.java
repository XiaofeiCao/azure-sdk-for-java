// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.implementation;

import com.azure.resourcemanager.appplatform.AppPlatformManager;
import com.azure.resourcemanager.appplatform.fluent.models.ApiPortalResourceInner;
import com.azure.resourcemanager.appplatform.models.SpringApiPortal;
import com.azure.resourcemanager.appplatform.models.SpringService;
import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;
import reactor.core.publisher.Mono;

public class SpringApiPortalImpl
    extends ExternalChildResourceImpl<SpringApiPortal, ApiPortalResourceInner, SpringServiceImpl, SpringService>
    implements SpringApiPortal {
    protected SpringApiPortalImpl(String name, SpringServiceImpl parent, ApiPortalResourceInner innerObject) {
        super(name, parent, innerObject);
    }

    @Override
    public String cpu() {
        return innerModel().properties().resourceRequests().cpu();
    }

    @Override
    public String memory() {
        return innerModel().properties().resourceRequests().memory();
    }

    @Override
    public String id() {
        return innerModel().id();
    }

    @Override
    public Mono<SpringApiPortal> createResourceAsync() {
        return manager().serviceClient().getApiPortals().createOrUpdateAsync(
            parent().resourceGroupName(), parent().name(), name(), innerModel()
        ).map(inner -> {
            setInner(inner);
            return this;
        });
    }

    @Override
    public Mono<SpringApiPortal> updateResourceAsync() {
        return createResourceAsync();
    }

    @Override
    public Mono<Void> deleteResourceAsync() {
        return manager().serviceClient().getApiPortals().deleteAsync(
            parent().resourceGroupName(), parent().name(), name()
        );
    }

    @Override
    protected Mono<ApiPortalResourceInner> getInnerAsync() {
        return manager().serviceClient().getApiPortals().getAsync(
            parent().resourceGroupName(), parent().name(), name()
        );
    }

    private AppPlatformManager manager() {
        return parent().manager();
    }
}
