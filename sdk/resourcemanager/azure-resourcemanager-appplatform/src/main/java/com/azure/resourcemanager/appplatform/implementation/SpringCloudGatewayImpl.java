// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.implementation;

import com.azure.resourcemanager.appplatform.fluent.models.GatewayResourceInner;
import com.azure.resourcemanager.appplatform.models.SpringCloudGateway;
import com.azure.resourcemanager.appplatform.models.SpringService;
import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;
import reactor.core.publisher.Mono;

public class SpringCloudGatewayImpl
    extends ExternalChildResourceImpl<SpringCloudGateway, GatewayResourceInner, SpringServiceImpl, SpringService>
    implements SpringCloudGateway {
    protected SpringCloudGatewayImpl(String name, SpringServiceImpl parent, GatewayResourceInner innerObject) {
        super(name, parent, innerObject);
    }

    @Override
    public String cpu() {
        return innerModel().properties().resourceRequests().cpu();
    }

    @Override
    public String memory() {
        return innerModel().properties().resourceRequests().memory();
    }

    @Override
    public String id() {
        return innerModel().id();
    }

    @Override
    public Mono<SpringCloudGateway> createResourceAsync() {
        return parent().manager().serviceClient().getGateways()
            .createOrUpdateAsync(parent().resourceGroupName(), parent().name(), Constants.DEFAULT_TANZU_COMPONENT_NAME, innerModel())
            .map(inner -> {
                this.setInner(inner);
                return this;
            });
    }

    @Override
    public Mono<SpringCloudGateway> updateResourceAsync() {
        return createResourceAsync();
    }

    @Override
    public Mono<Void> deleteResourceAsync() {
        return parent().manager().serviceClient().getGateways().deleteAsync(parent().resourceGroupName(), parent().name(), name());
    }

    @Override
    protected Mono<GatewayResourceInner> getInnerAsync() {
        return parent().manager().serviceClient().getGateways().getAsync(parent().resourceGroupName(), parent().name(), name());
    }
}
